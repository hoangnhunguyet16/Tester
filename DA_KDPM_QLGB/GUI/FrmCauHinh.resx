<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAgAAAAQAAAAGAcG
        BB4NDAsgERAPIA8ODh4FBAQYAAAAEAAAAAgAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDg0MFDQ0MTlNTUphXV5bhWdo
        ZaBqbGmzbG9swGhraMVhY1/FWVtXwFRYVLNRVVKhS09NhkBDQWIvMC87FBMSFgAAAAMBAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlYVwAIyEfEWtpZmOUk5C4sK+s58XE
        wfrV1ND/3NvY/9DRzv+9wL3/paii/4yKgP92cWT/eXZr/4GDfP+GjYj/hY6N+nh/fuhlaWa7TlBNZyIi
        IBR9fHcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvLSsAa2hiAEhGQRaal5GX0M7J9vDu
        6//49vT/9fLw/+zq6P/e3dn/w8S//6qspP+Sk4j/enhp/2VgUP9mYlb/cnNr/4SIhf+YoaH/oKim/5ma
        lP+Ihn/3cnFsnURCPhpjYVwAJiUkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw6NwDNyb8Ak4+HYtDO
        xvvk4t3/4N7W/9jUwv/RzKr/zseT/83Ghv/LxH3/zsZ3/83Fcv/JwG3/wbln/7OsYf+ln1v/j4lS/3dx
        S/9oZE//aGZc/398df+QkIz8dnVxabGyrQA1NDIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYl9aANbT
        ygCempN2yse9/93Zxf/p4bj/69yi/+nVif/nzXP/6M5u/+rQb//s02//7dVu/+/Xbv/x2m//9N90//bl
        ff/u34D/zLZc/7CQNv+IaSH/W0Uc/1pVS/9vb2x6g4WEAElIRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        fP9wb2v0dXNtS3l3cQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqaaeANLPxgCrp59z19TM/+De
        2v/f3tz/2tnX/9LS0P/Gx8X/ubu5/6qvrf+coZ//kJaT/4mMiP+Bg3//fH95/3yBff9+hoT/gY2N/4GK
        iv9/gn3/hIF6/5GRjP+GhoJ3l5mWAIGBfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAClopsAuLavAJ2a
        k3C8urb/0tDO/9vZ1//f3dr/393Z/9fW0//Nzcn/wsPA/7a5tv+ssK3/paqn/6Kopv+fp6X/nKSj/5ii
        of+Tnp3/jJaV/4KIhf9zdG7/ampl/3JxbHVxc3AAd3ZyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACTkYwAh4R/Kra0r7fb2dX54+Hd/+Xj3//l49//4+Hd/9rZ1f/Ozsv/w8TA/7e6tv+ssKz/paqn/6Go
        pf+epqT/nKSj/5miof+WoKD/k5yb/4yRjvp1dnG8Y2JdLmJhXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEZBNgCxrqgAjoqDEq+splfAvbmYy8jEwNHOytrV08/p1dTP88/OyvjHx8T7vb+7/LO1
        sfyorKj7oaWi+J2in/OZnpzqlJqY25CWlMGKkI6Zg4aCWnx6cxN7fHcAhoJ3AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMS8pABkXEwF2c2wLko6IG6GdlyykoZw8p6SfR6qo
        olCpqKNUoqKcVJiZk1CNjolHiImDPIaGgS1/fngcdHBpDEk4LwJiWEsAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD//4AAH/8AAA/+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gA
        AB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gA
        AB/4AAAf+AAAH/gAAB/8AAA//wAA//////8=
</value>
  </data>
</root>